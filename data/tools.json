{
    "fuzzers":[
        {
            "type": "定向模糊测试（Directed Gray-box Fuzzing, DGF）",
            "tools":[
                {
                    "name":"DeltaFuzz",
                    "description": "为更快速地执行到因版本迭代产生的变更点，DeltaFuzz自动识别这些变更点的位置，在种子执行时分析了程序的控制流信息，并在计算其覆盖路径与目标基本块之间距离时融合了该控制流，通过为距离更近的种子分配更多的变异资源来实现快速覆盖因版本迭代产生的变更点。"
                },
                {
                    "name":"CIDFuzz",
                    "description": "为更快速地执行到因持续集成产生的变更点，CIDFuzz自动识别这些变更点的位置，在种子执行时分析了程序的控制流和数据流信息，并在计算其覆盖路径与目标基本块之间距离时融合了所执行的控制流和数据流，通过为距离更近的种子分配更多的变异资源来实现快速覆盖因持续集成产生的变更点。"
                }
            ]
        },
        {
            "type": "覆盖率引导的模糊测试（Coverage-guided Gray-box Fuzzing, CGF）",
            "tools":[
                {
                    "name":"DPFuzz",
                    "description": "现有模糊测试工具通常不以发现软件缺陷为目的，导致尽管存在较高覆盖率但难以发现程序缺陷。DPFuzz使用缺陷预测模型学习代码特征，并为程序中的每个模块预测缺陷倾向，并通过在模糊测试阶段优先考虑具有较高缺陷倾向的模块来分配测试资源，以提升模糊测试发现缺陷的能力。"
                },
                {
                    "name":"BaSFuzz",
                    "description": "重复变异相似的种子通常会生成相似的测试用例，导致重复执行相似的代码片段，从而降低模糊测试效率。为此，BaSFuzz分析了种子间的字节相似度和结构相似度，并对二者进行加权求和以得到每个种子的相似度得分，通过为得分更低的种子赋予更高的变异优先级来缓解重复变异相似种子对模糊测试性能的影响。"
                },
                {
                    "name":"SDA-FirmFuzz",
                    "description": "现有的仿真嵌入式设备模糊测试难以生成高质量种子，而种子的质量会影响模糊测试的结果，高质量的种子可以使得覆盖更多的程序路径并触发崩溃。SDA-FirmFuzz通过在模糊测试前对种子队列进行差异化分析，使得差异化程度更高的种子优先被执行。"
                }
            ]
        }
    ]
}